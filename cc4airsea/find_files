#!/sw/spack-levante/mambaforge-4.11.0-0-Linux-x86_64-sobz6z/bin/python

import argparse


def get_from_cat(catalog, field, searchdict=None):
    """Call this to get all values of a field in the catalog as a sorted list"""
    if searchdict is not None and len(searchdict) > 0:
        cat = catalog.search(**searchdict)
    else:
        cat = catalog
    return sorted(cat.unique(field)[field]["values"])


def parse_args():
    parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter)
    parser.description = """List files for a given variable and simulation."""
    parser.epilog = """Note that regular expressions can be used, but need to follow the "full" regex-syntax.
    "20-02" will search for exactly "2020-02" (no regex used).
    "20-02*" will search for anything *containing* "20-0" and an arbitrary number of "2"s following that, so "2020-03" also matches.
    "20-02.*" will search for anything *containing* "20-02" .
    "^20-02.*" will search for anything *starting with* "20-02" .
    "2020-.*-03T" will search for anything *containing*  "2020", followed by an arbitrary number of characters followed by "03T".
    
Use "" to leave variable_id or simulation_id empty.

Use 
find_files "" "" -f "experiment_id,source_id" 
to get a list of all experiments and participating models available
    """
    parser.add_argument("variable_id")
    parser.add_argument("simulation_id")
    # optional arguments (those with default are added below)
    optional_args = [
        "project",
        "institution_id",
        "source_id",
        "experiment_id",
        "realm",
        "frequency",
        "time_reduction",
        "grid_label",
        "level_type",
        "time_min",
        "time_max",
        "grid_id",
        "format",
        "uri",
    ]
    for x in optional_args:
        parser.add_argument(f"--{x}", action="append")
    parser.add_argument(
        "-c", "--catalog_file", default="/work/ka1081/Catalogs/dyamond-nextgems.json"
    )
    parser.add_argument(
        "-f",
        "--print_format",
        default="uri",
        help="Comma separated list of columns to be plotted. e.g. 'variable_id,source_id'",
    )
    parser.add_argument(
        "--full", action="store_true", help="Print full dataset information"
    )

    parser.add_argument(
        "--time_range",
        nargs=2,
        help="Find all files that contain data from a given range START END. \n--time_range 2020-02-01 2020-02-03 will give you all data for 2020-02-01 and 2020-02-02. \nNote that 2020-02-03 is smaller than any timestamp on 2020-02-03 in the string comparison logic.",
    )

    pruned_dict = {k: v for k, v in vars(parser.parse_args()).items() if v is not None}
    if pruned_dict["full"]:
        pruned_dict["full"] = "True"
    else:
        del pruned_dict["full"]
    pruned_dict = {k: v for k, v in pruned_dict.items() if len(v) > 0}
    for k, v in pruned_dict.items():
        if len(v) == 1:
            pruned_dict[k] = v[0]
    return pruned_dict


def search_cat(cat, options):
    hitlist = cat
    use_tr = False
    if "time_range" in options.keys():
        use_tr = True
        tr = options["time_range"]
        del options["time_range"]
    if len(options):
        hitlist = hitlist.search(**options)
    if use_tr:
        hitlist.df = hitlist.df[
            (hitlist.df["time_min"] <= tr[1]) * (hitlist.df["time_max"] >= tr[0])
        ]
    return hitlist


if __name__ == "__main__":
    options = parse_args()
    import intake

    catalog_file = options["catalog_file"]
    del options["catalog_file"]
    cat = intake.open_esm_datastore(catalog_file)
    fmt = options.get("print_format")
    del options["print_format"]

    hitlist = search_cat(cat, options)
    try:
        if options.get("full", False):
            del options["full"]
            import pandas as pd

            pd.set_option("display.max_columns", None)
            pd.set_option("max_colwidth", None)
            pd.set_option("display.width", 10000)
            print(hitlist.df)
        else:
            cols = fmt.split(",")
            if len(cols) == 1:
                matches = get_from_cat(hitlist, fmt)
                [print(x) for x in matches]
            else:
                import pandas as pd

                pd.set_option("display.max_columns", None)
                pd.set_option("max_colwidth", None)
                pd.set_option("display.width", 10000)
                pd.set_option("display.max_rows", None)
                hitlist = (
                    hitlist.df[cols]
                    .drop_duplicates()
                    .sort_values(cols)
                    .to_string(index=False)
                )
                print(hitlist)
    except ValueError:
        import sys

        print(
            "\nERROR: Could not find any matches for your query ",
            options,
            "in catalog ",
            catalog_file,
            file=sys.stderr,
        )
        sys.exit(1)



